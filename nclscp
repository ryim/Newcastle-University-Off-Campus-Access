#!/usr/bin/perl

#   Please see the "LICENSE" file distributed alongside this file for licensing
#   information.

################################################################################
#   Section for pragmas, options parsing, idiotproofing, etc.
################################################################################

use warnings;
use strict;
use Getopt::Long;
Getopt::Long::Configure ("bundling");
use FindBin;

#   Global variables
my $rootdir = $FindBin::RealBin;  # Locate root dir
my $sshport = '';
my %activetunnels;
my %othertunnels;
my $username = "";
my $configchanged = 0;

#   Read in the config file

#   Set up help string. This is what's printed if there are errors.
my $helpstring = 
    "Usage: nclscp <-t server> <-m (in/out)> <-o destination> <file1> [file2] ...\n"
    ."Note: <file1> can be replaced by paths, to transfer the whole directory."
    ."\n"
    ."Examples\n===============================\n"
    ."Transferring from this machine to Rocket\n"
    ."nclscp -m in file.txt -o /mnt/nfs/home/username\n\n"
    ."Transferring from Rocket to this machine\n"
    ."nclscp -m out file.xls file2.txt -o /home/username/destination\n\n"
    ."server names, and their aliases are kept in the nclscp.config file.\n\n"
    ."OPTIONS\n"
    ."\t-h\n\t\tPrint this help text.\n\n"
    ."\t-m | --mode <in/out>\n"
    ."\t\tCopy out from the target machine, or into it.\n\n"
    ."\t-o | --out /destination/of/scp/command\n"
    ."\t\tSpecify destination of scp command\n\n"
    ."\t-t | --target_machine target.co.uk\n"
    ."\t\tSpecify remote machine name, alias as written in nclscp.config, or IP\n\n"
    ."\t-u | --target_username username\n"
    ."\t\tSpecify a different username on the target machine from your normal\n"
    ."\t\tNewcastle University username\n\n"
;

#   Define variables to store command line options in
my $help = 0;
my $out;        # The destination file
my $mode;       # in=from localhost to target, out=from target to localhost
my $tuname;
my $host2;
my $toconfig = 0;
my $forport;

#   Get command line options
GetOptions(
            "h|help" => \$help,
            "o|out=s" => \$out,
            "t|target_machine=s" => \$host2,
            "p|forwarding_port=s" => \$forport,
            "u|target_username=s" => \$tuname,
            "c|config" => \$toconfig,
            "m|mode=s" => \$mode
);

#   If help is requested in the command line options, give it.
if ($help == 1) {
    print $helpstring;
    exit(0);
}

#   General idiotproofing of command line inputs
if (!$out || !@ARGV || !$mode) {
	print "Error: Need to specify a file to move, a mode, and destination.\n\n"
        ."$helpstring"
    ;
	exit(1);
}
elsif ($mode !~ m/out|in/i) {
	print "Unrecognised mode: $mode\n"
        ."Mode must either be 'in' or 'out'.\n\n"
        ."$helpstring"
    ;
	exit(1);
}

################################################################################
#   Read through the config file, if it's in its proper place. Resolve aliases 
#   into hostnames and preferred usernames.
################################################################################
#print "Getting config.\n";
my @configarray;
my $configfile = "${rootdir}/nclscp.config";
my $aliasfound = 0;

if (-e $configfile) {
    open(my $configfh, "<", $configfile);
    foreach my $line (<$configfh>) {

        chomp $line;

        #   Check for and parse primary username line. If already found one,
        #   throw warning and only use the first one.
        if ($line =~ m/^NCL_username\=/) {
            
            if ($username) {
                print "Warning: Username already found.\n"
                    ."Using first one: $username\n"
                    ."Removing all subsequent username instances.\n";
                $configchanged = 1;
            }
            else {
                ($username = $line) =~ s/NCL_username\=//;
                push(@configarray, $line);
            }
            next;
        }
        #   Ignore empty lines or comment lines, and lines after the appropriate
        #   alias
        elsif ($line =~ m/^\#/ || $line !~ m/\w/ || $aliasfound) {
            push(@configarray, $line);
            next;
        }

        #   Read config lines, check them against the target, and store.
        my ($alias, $hostname, $prefuname, $prefport) = split(/\t/, $line);
        if ($alias eq $host2 || $hostname eq $host2) {
            
            $host2 = $hostname;
            if ($prefuname && ! $tuname) {
                $tuname = $prefuname;
            }
            if ($prefport && ! $forport) {
                $forport = $prefport;
            }
            
            $aliasfound = 1;
            push(@configarray, $line);

        }
        #   If it's not  the right host, just store it.
        else {
            push(@configarray, $line);
        }
    }
    close($configfh);
}
else {
    print "Warning: nclscp.config file not found in nclscp installation dir.\n"
        ."$configfile\n";
}
undef($aliasfound);

################################################################################
#   Prompt the username if there isn't one, or if the -c flag used.
#   Go through the config file and edit the file to replace the original
#   username line with the new one.
################################################################################

if (! $username || $toconfig) {
    print "Please input your username to unix.ncl.ac.uk.\n>";
    $username = <STDIN>;
    chomp $username;
    
    $configchanged = 1;
    my $lineedited = 0;
    foreach my $line (@configarray) {
        if ($line =~ m/^NCL_username\=/) {
            $line = "NCL_username=$username";
            $lineedited = 1;
            last;
        }
    }
    
    #   If there isn't a username line, add one.
    if (! $lineedited) {
        push(@configarray, "NCL_username=$username");
    }
}

#   If this is only a config run, then output the new config file and exit.
#   Otherwise, continue the script
if ($toconfig) {
    outputconfig($configfile, @configarray);
    exit(0);
}
undef($toconfig);

#   Configure the main host, and the target username, without storing it.
my $host1="${username}\@unix.ncl.ac.uk";
if (! $tuname) {
    $tuname = $username;
}

################################################################################
#   Find SSH port-forwarding tunnels to make sure none clash
#   If an active tunnel to the target is found, store the port in $sshport, and
#   skip the rest of the search
################################################################################

#   Grab a list of active port forwarding tunnels that go through unix.ncl.ac.uk
#   Ignore the preferred port in the config file in favour of the active tunnel
foreach my $line (split(/\n/, `ps aux | grep -v grep | grep 'ssh.*-L' | grep 'unix.ncl.ac.uk' | sed 's/.*\-L //'`)) {

    chomp $line;
    $line =~ s/^([\w\-\.\:]+)\s.*/$1/;
    my ($port, $target) = split(/\:/, $line);
    $activetunnels{$port} = $target;
    
    if ($target eq $host2) {
        $sshport = $port;
        last;
    }
}

#   Find other tunnels that would take up ports
if (! $sshport) {
    foreach my $line (split(/\n/, `ps aux | grep -v grep | grep -v 'unix.ncl.ac.uk' | grep 'ssh.*-L'`)) {

        chomp $line;
        $line =~ s/^.*\-L\s+([\w\-\.]+?)\:.*/$1/;
        $othertunnels{$line} = 1;
    }
}

#   Logging
if (! $sshport) {
    if (%activetunnels) {
        print "Found active tunnels through unix.ncl.ac.uk:\n";
        foreach my $key (keys(%activetunnels)) {
            print "Port: $key\tMachine: $activetunnels{$key}\n";
        }
    }

    if (%othertunnels) {
        print "Found other tunnels with the following ports:\n";
        foreach my $key (keys(%othertunnels)) {
            print "$key ";
        }
        print "\n";
    }
}


################################################################################
#   If there isn't an active tunnel to the target, find a port without a tunnel
#   and start a tunnel there
################################################################################

#   If no active process is found, start one
if (! $sshport) {

    print "No active tunnel to target found.\nStarting tunnel to $host2\n";

    #   Pick a port with no active tunnel on it, starting with the preferred one
    if ($forport) {
        if (! $activetunnels{$forport} && ! $othertunnels{$forport}) {
            $sshport = $forport;
        }
        else {
            print "Port in use: $forport\nChoosing another.\n";
        }
    }

    #   If there's still no targeted SSH port, choose one, then store it as the
    #   preferred in the config file. This way, other programs and this one
    #   which cause conflicts with port forwarding will make this one shift to
    #   accommodate any changes.
    if (! $sshport) {
    
        $sshport = int(rand(999) + 4000);
        until (! $activetunnels{$sshport} && ! $othertunnels{$sshport}) {
            $sshport = int(rand(999) + 4000);
        }
        
        #   Store the new preferred port
        my $inlineedited = 0;
        foreach my $line (@configarray) {
            if ($line =~ m/\t/) {
                my ($alias, $hostname, $prefuname, $prefport) 
                    = split(/\t/, $line);
                if ($hostname eq $host2) {
                    $line = "$alias\t$hostname\t$prefuname\t$sshport";
                    $inlineedited = 1;
                }
            }
        }
        
        if (! $inlineedited) {
            push (@configarray, "\t$host2\t\t$sshport");
        }
        
        $configchanged = 1;

    }

    #   The command which forwards a port on your machine to Port 22 on Aidan
    #   for 1 hour
    system("ssh -o ControlMaster=yes "
        ."-o ControlPersist=3600 "
        ."-o ServerAliveInterval=300 "
        ."-o ControlPath=/tmp/ssh-%u-%h-%p-%r-%n "
        ."-Nf "
        ."-L $sshport:$host2:22 $host1"
    );
}
else {
    print "Active tunnel to target found on port: $sshport\n";
}

#   If the config lines have changed, then write the new config to file

if ($configchanged) {
    outputconfig($configfile, @configarray);
}

################################################################################
#   The scp command
################################################################################

#   Logging
print "Starting transfer. Enter target machine's password at the prompt.\n";

#   Perform the SCP command depending on the mode (into Rocket, or out of it)
if ($mode =~ m/in/i) {
    system("scp -r -P ${sshport} " 
            . join(" ", @ARGV) 
            . " $tuname\@localhost:$out"
    );
}
elsif ($mode =~ m/out/i) {
    system("scp -r -P $sshport $tuname\@localhost:\"" 
        . join(" ", @ARGV) 
        . "\" $out"
    );
}

################################################################################
#   Output config file subroutine
################################################################################

sub outputconfig {
    my ($configfile, @outlines) = @_;
    
    open(my $confoutfh, '>', $configfile) or die "Couldn't open $configfile\n";
    print $confoutfh join("\n", @outlines);
    close($confoutfh);
}



