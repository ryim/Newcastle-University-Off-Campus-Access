#!/usr/bin/perl

#   Please see the "LICENSE" file distributed alongside this file for licensing
#   information.


################################################################################
#                                Username here                                 #
#                               ===============                                #
my $username = "USERNAME";
#                                                                              #
################################################################################


################################################################################
#   Section for pragmas, options parsing, idiotproofing, etc.
################################################################################

use warnings;
use strict;
use Getopt::Long;
Getopt::Long::Configure ("bundling");
use FindBin;

#   Global variables
(my $rootdir = $FindBin::RealBin) =~ s/(.*\/).*?$/$1/;  # Locate root dir
my $sshport = 4567;
my $host1="${username}\@unix.ncl.ac.uk";
my $host2='rocket.hpc.ncl.ac.uk';

#   Set up help string. This is what's printed if there are errors.
my $helpstring = 
    "Usage: rocketscp <-m (in/out)> <-o destination> <file1> [file2] ...\n"
    ."Note: <file1> can be replaced by paths, to transfer the whole directory."
    ."\n"
    ."Examples\n===============================\n"
    ."Transferring from this machine to Rocket\n"
    ."rocketscp -m in file.txt -o /mnt/nfs/home/username\n\n"
    ."Transferring from Rocket to this machine\n"
    ."rocketscp -m out file.xls file2.txt -o /home/username/destination\n\n"
;

#   Define variables to store command line options in
my $help = 0;
my $out;        # The destination file
my $mode;       # in=from localhost to Rocket, out=from Rocket to localhost

#   Get command line options
GetOptions(
            "h|help" => \$help,
            "o|out=s" => \$out,
            "m|mode=s" => \$mode
);

#   If help is requested in the command line options, give it.
if ($help == 1) {
    print $helpstring;
    exit(0);
}

#   General idiotproofing of command line inputs
if (!$out || !@ARGV || !$mode) {
	print "Error: Need to specify a file to move, a mode, and destination.\n\n"
        ."$helpstring"
    ;
	exit(1);
}
elsif ($mode !~ m/out|in/i) {
	print "Unrecognised mode: $mode\n"
        ."Mode must either be 'in' or 'out'.\n\n"
        ."$helpstring"
    ;
	exit(1);
}

################################################################################
#   Checking for an active SSH tunnel, and starting one if there isn't one
################################################################################

#   $exitcode is 0 if an active process is found
my $exitcode = system("ps aux "
                        ."| grep -v grep "
                        ."| grep \'$sshport:$host2:22\' > /dev/null"
               );

#   If no active process is found, start one
if ($exitcode != 0) {

    print "No active port forwarding tunnel found. Starting tunnel.\n";

    #   The command which forwards a port on your machine to Port 22 on Aidan
    #   for 10 minutes
    system("ssh -o ControlMaster=yes "
        ."-o ControlPersist=600 "
        ."-o ControlPath=/tmp/ssh-%u-%h-%p-%r "
        ."-Nf "
        ."-L $sshport:$host2:22 $host1"
    );
}

################################################################################
#   The scp command
################################################################################

#   Perform the SCP command depending on the mode (into Rocket, or out of it)
if ($mode =~ m/in/i) {
    system("scp -r -P ${sshport} " 
            . join(" ", @ARGV) 
            . " $username\@localhost:$out"
    );
}
elsif ($mode =~ m/out/i) {
    system("scp -r -P 4567 $username\@localhost:" 
        . join(" $username\@localhost:", @ARGV) 
        . " $out"
    );
}
